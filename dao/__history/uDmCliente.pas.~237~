unit uDmCliente;

interface

uses
  SysUtils, Classes, DB, ADODB, uDmConexao, Dialogs, uClienteModel, Contnrs;

type
  TdmCliente = class(TDataModule)
    sqlPesquisar: TADOQuery;
    sqlConsulta : TADOQuery;
    sqlGravar: TADOQuery;

  private
    { Private declarations }
  public
    { Public declarations }
    function Pesquisar     (objCliente: TClienteModel): TADOQuery;
    function Detalhar      (objCliente: TClienteModel): TADOQuery;
    function Gravar        (objCliente: TClienteModel): Boolean;
    function buscarPorID   (objCliente: TClienteModel): Boolean;
    function Excluir       (objCliente: TClienteModel): Boolean;
    function Alterar       (objCliente: TClienteModel): Boolean;
    function GravarLista   (listaObjCliente: TObjectList): Boolean;
                           //RECEBO                      //RETORNO
  end;

var
  dmCliente: TdmCliente;

implementation

{$R *.dfm}

{ TdmCliente }

//Jeito muito bom de fazer query para alterar algo em banco!
function TdmCliente.Alterar(objCliente: TClienteModel): Boolean;
begin
  try
    uDmConexao.dmConexao.sqlConexao.BeginTrans;

    With sqlGravar do
    begin
      Close;
      sql.Clear;
      sql.Add('UPDATE cliente SET ' +
              'nome = :nome,' +
              'genero = :genero,' +
              'tipoDocumento = :tipoDocumento,' +
              'documento = :documento,' +
              'telefone = :telefone ' +
              'WHERE id = :id');

      Parameters.ParamByName('id').Value            := ObjCliente.ID;
      Parameters.ParamByName('nome').Value          := ObjCliente.Nome;
      Parameters.ParamByName('genero').Value        := ObjCliente.Genero;
      Parameters.ParamByName('tipoDocumento').Value := ObjCliente.tipoDocumento;
      Parameters.ParamByName('documento').Value     := ObjCliente.Documento;
      Parameters.ParamByName('telefone').Value      := ObjCliente.Telefone;
      ExecSQL;

      uDmConexao.dmConexao.sqlConexao.CommitTrans;
      Result := true;
    end;
  except
    on E: Exception do
    begin
      uDmConexao.dmConexao.sqlConexao.RollbackTrans;
      MessageDlg('Erro ao gravar!' + sLineBreak + E.Message, mtError,[mbOK], 0);
      Result := false;
    end;
  end;
end;

function TdmCliente.BuscarPorID(objCliente: TClienteModel): Boolean;
begin
  try
    With sqlConsulta do
    begin
      Close;
      sql.Clear;
      sql.Add('SELECT id, nome, genero, tipoDocumento, documento, telefone FROM cliente ' +
              'WHERE ' +
              'id = :id');
      Parameters.ParamByName('id').Value := ObjCliente.ID;
      Open;

      //Se minha query retornar zero registros então
      if sqlConsulta.RecordCount = 0 then
        Result := False
      else
        Result := True;    
    end;
  except on E: Exception do
    MessageDlg('Erro ao buscar id!' + sLineBreak + E.Message, mtError,[mbOK], 0)
  end;
end;

function TdmCliente.Detalhar(ObjCliente: TClienteModel): TADOQuery;
var
  txtSql : String;
begin
  try
    With sqlPesquisar do
    begin
      Close;
      sql.Clear;

      //Se for vazio aplica o select para todo o cliente
      txtSql := 'SELECT id, nome, genero, tipoDocumento, documento, telefone FROM cliente ';

      if objCliente.Nome <> EmptyStr then
      txtSql := txtSql + 'WHERE (nome like :nome)';

      if objCliente.ID <> 0 then
      txtSql := txtSql + 'WHERE (id = :id)';

      //ParamByName não pode ser adicionado antes do sql.Add
      sql.Add(txtSql);

      if objCliente.Nome <> EmptyStr then
        Parameters.ParamByName('nome').Value := ObjCliente.Nome;

      if objCliente.id <> 0 then
        Parameters.ParamByName('id').Value := ObjCliente.ID;

      Open;
    end;
      Result := sqlPesquisar;
  except on E: Exception do
    MessageDlg('Erro ao detalhar cliente!' + sLineBreak + E.Message, mtError,[mbOK], 0)
  end;
end;

function TdmCliente.Excluir(objCliente: TClienteModel): Boolean;
begin
 try
    With sqlGravar do
    begin
      Close;
      sql.Clear;
      sql.Add('DELETE FROM cliente WHERE id = :id');
      Parameters.ParamByName('id').Value := ObjCliente.ID;
      ExecSQL;
      Result := true;
    end;
  except
  on E: Exception do
    begin
      MessageDlg('Erro ao buscar id!' + sLineBreak + E.Message, mtError,[mbOK], 0);
      Result := false;
    end;
  end;
end;

{INSERT, UPDATE, e DELETE posso ter o Boolean como retorno,
pois ele não me retorna uma query
lembrando que preciso ter o Result como true ou false nas condições}
function TdmCliente.Gravar(objCliente: TClienteModel): Boolean;
begin
  try
    With sqlGravar do
    begin
      // Verificar se o ID já existe
     buscarPorID(objCliente);

      // Se o ID não existir, então insira o novo registro
      if not buscarPorID(objCliente) then
      begin
        Close;
        sql.Clear;

        sql.Add('INSERT INTO cliente (id, nome, genero, tipoDocumento, documento, telefone) ' +
                'VALUES (:id, :nome, :genero, :tipoDocumento, :documento, :telefone)');

        Parameters.ParamByName('id').Value            := ObjCliente.ID;
        Parameters.ParamByName('nome').Value          := ObjCliente.Nome;
        Parameters.ParamByName('genero').Value        := ObjCliente.Genero;
        Parameters.ParamByName('tipoDocumento').Value := ObjCliente.tipoDocumento;
        Parameters.ParamByName('documento').Value     := ObjCliente.Documento;
        Parameters.ParamByName('telefone').Value      := ObjCliente.Telefone;
        ExecSQL;
        Result := true;
      end
      else
      begin
        // Se o ID já existir, exiba uma mensagem
        MessageDlg('O ID já existe!', mtError, [mbOK], 0);
        Result := false;
        Exit;
      end;
    end;
  except
    on E: Exception do
    begin
      MessageDlg('Erro ao gravar!' + sLineBreak + E.Message, mtError,[mbOK], 0);
      Result := false;
    end;
  end;
end;

function TdmCliente.GravarLista(listaObjCliente: TObjectList): Boolean;
var
  I: integer;
  objCliente: TClienteModel;
begin
  try
    With sqlGravar do
    begin
      for I := 0 to listaObjCliente.Count - 1 do
      begin
        //Abrir minha lista (pegando os objetos dentro da lista)
        objCliente := TClienteModel(listaObjCliente[I]);
        Close;
        sql.Clear;

        sql.Add('INSERT INTO cliente (id, nome, genero, tipoDocumento, documento, telefone) ' +
                'VALUES (:id, :nome, :genero, :tipoDocumento, :documento, :telefone)');

        Parameters.ParamByName('id').Value            := objCliente.ID;
        Parameters.ParamByName('nome').Value          := ObjCliente.Nome;
        Parameters.ParamByName('genero').Value        := ObjCliente.Genero;
        Parameters.ParamByName('tipoDocumento').Value := ObjCliente.tipoDocumento;
        Parameters.ParamByName('documento').Value     := ObjCliente.Documento;
        Parameters.ParamByName('telefone').Value      := ObjCliente.Telefone;
        ExecSQL;
        Result := true;
      end;
    end;
  except
    on E: Exception do
    begin
      MessageDlg('Erro ao gravar!' + sLineBreak + E.Message, mtError,[mbOK], 0);
      Result := false;
    end;
  end;
end;

function TdmCliente.Pesquisar(ObjCliente: TClienteModel): TADOQuery;
var
  txtSql : String;
begin
  try
    With sqlPesquisar do
    begin
      Close;
      sql.Clear;

      txtSql := 'SELECT id, nome, telefone FROM cliente ';

      if objCliente.Nome <> EmptyStr then
        txtSql := txtSql + 'WHERE (nome like :nome)';

      //Se for diferente de vazio prossegue com o código
      sql.Add(txtSql);

      if objCliente.Nome <> EmptyStr then
        Parameters.ParamByName('nome').Value := ObjCliente.Nome;

      Open;
    end;
      Result := sqlPesquisar;
  except on E: Exception do
    MessageDlg('Erro ao pesquisar!' + sLineBreak + E.Message, mtError,[mbOK], 0)
  end;
end;

end.
